/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vqq2EkAzn3CTTzmF7cN3ao
// Component: TvgYy1l8Ht5S

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: TUfunDceiXe8/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: vqq2EkAzn3CTTzmF7cN3ao/projectcss
import sty from "./PlasmicHeaderLink.module.css"; // plasmic-import: TvgYy1l8Ht5S/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: gQ9GL9qi87FQ/icon
import ChevronDown2Icon from "./icons/PlasmicIcon__ChevronDown2"; // plasmic-import: qG4-swCrl7ga/icon

createPlasmicElementProxy;

export type PlasmicHeaderLink__VariantMembers = {};
export type PlasmicHeaderLink__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeaderLink__VariantsArgs;
export const PlasmicHeaderLink__VariantProps = new Array<VariantPropType>();

export type PlasmicHeaderLink__ArgsType = { children?: React.ReactNode };
type ArgPropType = keyof PlasmicHeaderLink__ArgsType;
export const PlasmicHeaderLink__ArgProps = new Array<ArgPropType>("children");

export type PlasmicHeaderLink__OverridesType = {
  root?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  text?: Flex__<"div">;
};

export interface DefaultHeaderLinkProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeaderLink__RenderFunc(props: {
  variants: PlasmicHeaderLink__VariantsArgs;
  args: PlasmicHeaderLink__ArgsType;
  overrides: PlasmicHeaderLink__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <PlasmicLink__
        className={classNames(
          projectcss.all,
          projectcss.a,
          projectcss.__wab_text,
          sty.link___4IdF6
        )}
        component={Link}
        href={"https://www.plasmic.app/"}
        platform={"nextjs"}
      >
        {"Services"}
      </PlasmicLink__>
      <PlasmicLink__
        className={classNames(projectcss.all, projectcss.a, sty.link__boKgt)}
        component={Link}
        href={"https://www.plasmic.app/"}
        platform={"nextjs"}
      >
        {renderPlasmicSlot({
          defaultContents: "Features",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </PlasmicLink__>
      <PlasmicLink__
        className={classNames(
          projectcss.all,
          projectcss.a,
          projectcss.__wab_text,
          sty.link__mo7Vx
        )}
        component={Link}
        href={"https://www.plasmic.app/"}
        platform={"nextjs"}
      >
        {"Company"}
      </PlasmicLink__>
      <PlasmicLink__
        className={classNames(
          projectcss.all,
          projectcss.a,
          projectcss.__wab_text,
          sty.link__de6Si
        )}
        component={Link}
        href={"https://www.plasmic.app/"}
        platform={"nextjs"}
      >
        {"Contact"}
      </PlasmicLink__>
      <PlasmicLink__
        className={classNames(
          projectcss.all,
          projectcss.a,
          projectcss.__wab_text,
          sty.link__ipXfh
        )}
        component={Link}
        href={"https://www.plasmic.app/"}
        platform={"nextjs"}
      >
        {"Log in"}
      </PlasmicLink__>
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
        color={"black"}
        end={
          <ChevronDown2Icon
            className={classNames(projectcss.all, sty.svg__byt6X)}
            role={"img"}
          />
        }
        label={
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Sign up"}
          </div>
        }
        start={
          <CircleIcon
            className={classNames(projectcss.all, sty.svg__qIPu7)}
            role={"img"}
          />
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button", "text"],
  button: ["button", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeaderLink__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeaderLink__VariantsArgs;
    args?: PlasmicHeaderLink__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeaderLink__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeaderLink__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeaderLink__ArgProps,
          internalVariantPropNames: PlasmicHeaderLink__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeaderLink__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeaderLink";
  } else {
    func.displayName = `PlasmicHeaderLink.${nodeName}`;
  }
  return func;
}

export const PlasmicHeaderLink = Object.assign(
  // Top-level PlasmicHeaderLink renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicHeaderLink
    internalVariantProps: PlasmicHeaderLink__VariantProps,
    internalArgProps: PlasmicHeaderLink__ArgProps
  }
);

export default PlasmicHeaderLink;
/* prettier-ignore-end */
