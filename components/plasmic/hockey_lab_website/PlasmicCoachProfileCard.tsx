/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vqq2EkAzn3CTTzmF7cN3ao
// Component: pwkDe4WdLeEP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: TUfunDceiXe8/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: vqq2EkAzn3CTTzmF7cN3ao/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: vqq2EkAzn3CTTzmF7cN3ao/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: vqq2EkAzn3CTTzmF7cN3ao/projectcss
import sty from "./PlasmicCoachProfileCard.module.css"; // plasmic-import: pwkDe4WdLeEP/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: gQ9GL9qi87FQ/icon
import ChevronDown2Icon from "./icons/PlasmicIcon__ChevronDown2"; // plasmic-import: qG4-swCrl7ga/icon

createPlasmicElementProxy;

export type PlasmicCoachProfileCard__VariantMembers = {};
export type PlasmicCoachProfileCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicCoachProfileCard__VariantsArgs;
export const PlasmicCoachProfileCard__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCoachProfileCard__ArgsType = {
  slot2?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot3?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCoachProfileCard__ArgsType;
export const PlasmicCoachProfileCard__ArgProps = new Array<ArgPropType>(
  "slot2",
  "children",
  "slot",
  "slot3"
);

export type PlasmicCoachProfileCard__OverridesType = {
  root?: Flex__<"div">;
  h3?: Flex__<"h3">;
  img?: Flex__<typeof PlasmicImg__>;
  button?: Flex__<typeof Button>;
};

export interface DefaultCoachProfileCardProps {
  slot2?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCoachProfileCard__RenderFunc(props: {
  variants: PlasmicCoachProfileCard__VariantsArgs;
  args: PlasmicCoachProfileCard__ArgsType;
  overrides: PlasmicCoachProfileCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__g3NSq)}>
        {renderPlasmicSlot({
          defaultContents: (
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__bciLh)}
              displayHeight={"300px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"300px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/hockey_lab_website/images/_20240601103603154612FfJpg.jpg",
                fullWidth: 5184,
                fullHeight: 3456,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.slot2
        })}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__buQZ)}>
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(projectcss.all, projectcss.h3, sty.h3)}
        >
          {renderPlasmicSlot({
            defaultContents: "Coach Jackie",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </h3>
        <div className={classNames(projectcss.all, sty.freeBox___7VTB)}>
          {renderPlasmicSlot({
            defaultContents:
              "FIH Educator & Level 4 Coach\nFormer Hong Kong National Player",
            value: args.slot,
            className: classNames(sty.slotTargetSlot)
          })}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__dk4)}>
          <div className={classNames(projectcss.all, sty.freeBox__oR1DZ)}>
            {renderPlasmicSlot({
              defaultContents: (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__osCgC)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/hockey_lab_website/images/fihLogoSvg.svg",
                    fullWidth: 291.02,
                    fullHeight: 151.18,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.slot3
            })}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__zEpDx)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"40px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/hockey_lab_website/images/stJohnLogoSvg.svg",
                fullWidth: 86,
                fullHeight: 70,
                aspectRatio: undefined
              }}
            />
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__xuYIc)}>
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            color={"blue"}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aGZp
                )}
              >
                {"bOOK NOW"}
              </div>
            }
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__y6D3I
            )}
          >
            {"Comin soon"}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h3", "img", "button"],
  h3: ["h3"],
  img: ["img"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h3: "h3";
  img: typeof PlasmicImg__;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCoachProfileCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCoachProfileCard__VariantsArgs;
    args?: PlasmicCoachProfileCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCoachProfileCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCoachProfileCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCoachProfileCard__ArgProps,
          internalVariantPropNames: PlasmicCoachProfileCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCoachProfileCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCoachProfileCard";
  } else {
    func.displayName = `PlasmicCoachProfileCard.${nodeName}`;
  }
  return func;
}

export const PlasmicCoachProfileCard = Object.assign(
  // Top-level PlasmicCoachProfileCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicCoachProfileCard
    internalVariantProps: PlasmicCoachProfileCard__VariantProps,
    internalArgProps: PlasmicCoachProfileCard__ArgProps
  }
);

export default PlasmicCoachProfileCard;
/* prettier-ignore-end */
