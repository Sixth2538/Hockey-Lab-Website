/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vqq2EkAzn3CTTzmF7cN3ao
// Component: ofZRJvk17xGu

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: vqq2EkAzn3CTTzmF7cN3ao/projectcss
import sty from "./PlasmicServiceCard3.module.css"; // plasmic-import: ofZRJvk17xGu/css

createPlasmicElementProxy;

export type PlasmicServiceCard3__VariantMembers = {};
export type PlasmicServiceCard3__VariantsArgs = {};
type VariantPropType = keyof PlasmicServiceCard3__VariantsArgs;
export const PlasmicServiceCard3__VariantProps = new Array<VariantPropType>();

export type PlasmicServiceCard3__ArgsType = {
  teamClub?: string;
  individualGroup?: string;
  hockeyTour?: string;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  children?: React.ReactNode;
  slot3?: React.ReactNode;
};
type ArgPropType = keyof PlasmicServiceCard3__ArgsType;
export const PlasmicServiceCard3__ArgProps = new Array<ArgPropType>(
  "teamClub",
  "individualGroup",
  "hockeyTour",
  "slot",
  "slot2",
  "children",
  "slot3"
);

export type PlasmicServiceCard3__OverridesType = {
  root?: Flex__<"div">;
  h4?: Flex__<"h4">;
};

export interface DefaultServiceCard3Props {
  teamClub?: string;
  individualGroup?: string;
  hockeyTour?: string;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  children?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicServiceCard3__RenderFunc(props: {
  variants: PlasmicServiceCard3__VariantsArgs;
  args: PlasmicServiceCard3__ArgsType;
  overrides: PlasmicServiceCard3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          teamClub:
            "Our effective process starts with understanding, leads to strategic planning, and culminates in clear team goals.",
          individualGroup:
            "Our individual and group training prioritize maximizing ball contact time and specificity to deliver optimal player development.",
          hockeyTour:
            "We take care of all the logistics \u2013 transportation, accommodation, training facilities, and opponent scheduling \u2013 so you can focus on your hockey."
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <h4
        data-plasmic-name={"h4"}
        data-plasmic-override={overrides.h4}
        className={classNames(projectcss.all, projectcss.h4, sty.h4)}
      >
        {renderPlasmicSlot({
          defaultContents: "Hockey Tour",
          value: args.slot
        })}
      </h4>
      <div className={classNames(projectcss.all, sty.freeBox__xdcae)}>
        {renderPlasmicSlot({
          defaultContents:
            "Experience foreign hockey culture with our overseas tour",
          value: args.slot2,
          className: classNames(sty.slotTargetSlot2)
        })}
      </div>
      {(triggers.hover_root ? false : true)
        ? renderPlasmicSlot({
            defaultContents: (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__zELnj)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"175px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/hockey_lab_website/images/travelingPng.png",
                  fullWidth: 2000,
                  fullHeight: 2000,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.children
          })
        : null}
      <div className={classNames(projectcss.all, sty.freeBox__wlYb)}>
        <div className={classNames(projectcss.all, sty.freeBox__hLZoI)}>
          {renderPlasmicSlot({
            defaultContents:
              "We take care of all the logistics \u2013 transportation, accommodation, training facilities, and opponent scheduling \u2013 so you can focus on your hockey.",
            value: args.slot3,
            className: classNames(sty.slotTargetSlot3)
          })}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h4"],
  h4: ["h4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h4: "h4";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicServiceCard3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicServiceCard3__VariantsArgs;
    args?: PlasmicServiceCard3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicServiceCard3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicServiceCard3__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicServiceCard3__ArgProps,
          internalVariantPropNames: PlasmicServiceCard3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicServiceCard3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServiceCard3";
  } else {
    func.displayName = `PlasmicServiceCard3.${nodeName}`;
  }
  return func;
}

export const PlasmicServiceCard3 = Object.assign(
  // Top-level PlasmicServiceCard3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),

    // Metadata about props expected for PlasmicServiceCard3
    internalVariantProps: PlasmicServiceCard3__VariantProps,
    internalArgProps: PlasmicServiceCard3__ArgProps
  }
);

export default PlasmicServiceCard3;
/* prettier-ignore-end */
